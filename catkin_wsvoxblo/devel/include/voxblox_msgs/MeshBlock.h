// Generated by gencpp from file voxblox_msgs/MeshBlock.msg
// DO NOT EDIT!


#ifndef VOXBLOX_MSGS_MESSAGE_MESHBLOCK_H
#define VOXBLOX_MSGS_MESSAGE_MESHBLOCK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <voxblox_msgs/Triangle.h>

namespace voxblox_msgs
{
template <class ContainerAllocator>
struct MeshBlock_
{
  typedef MeshBlock_<ContainerAllocator> Type;

  MeshBlock_()
    : index()
    , triangles()  {
      index.assign(0);
  }
  MeshBlock_(const ContainerAllocator& _alloc)
    : index()
    , triangles(_alloc)  {
  (void)_alloc;
      index.assign(0);
  }



   typedef boost::array<int64_t, 3>  _index_type;
  _index_type index;

   typedef std::vector< ::voxblox_msgs::Triangle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::voxblox_msgs::Triangle_<ContainerAllocator> >::other >  _triangles_type;
  _triangles_type triangles;





  typedef boost::shared_ptr< ::voxblox_msgs::MeshBlock_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voxblox_msgs::MeshBlock_<ContainerAllocator> const> ConstPtr;

}; // struct MeshBlock_

typedef ::voxblox_msgs::MeshBlock_<std::allocator<void> > MeshBlock;

typedef boost::shared_ptr< ::voxblox_msgs::MeshBlock > MeshBlockPtr;
typedef boost::shared_ptr< ::voxblox_msgs::MeshBlock const> MeshBlockConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voxblox_msgs::MeshBlock_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voxblox_msgs::MeshBlock_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace voxblox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'voxblox_msgs': ['/home/best_jill_forever/catkin_ws/src/voxblox/voxblox_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::voxblox_msgs::MeshBlock_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voxblox_msgs::MeshBlock_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voxblox_msgs::MeshBlock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voxblox_msgs::MeshBlock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voxblox_msgs::MeshBlock_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voxblox_msgs::MeshBlock_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voxblox_msgs::MeshBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d5a456d47efe5b8b0afaf3286c9b421";
  }

  static const char* value(const ::voxblox_msgs::MeshBlock_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d5a456d47efe5b8ULL;
  static const uint64_t static_value2 = 0xb0afaf3286c9b421ULL;
};

template<class ContainerAllocator>
struct DataType< ::voxblox_msgs::MeshBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voxblox_msgs/MeshBlock";
  }

  static const char* value(const ::voxblox_msgs::MeshBlock_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voxblox_msgs::MeshBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Index of meshed points in block map\n\
int64[3] index\n\
\n\
voxblox_msgs/Triangle[] triangles\n\
\n\
================================================================================\n\
MSG: voxblox_msgs/Triangle\n\
# Colored triangle used in meshing\n\
\n\
# Position\n\
float32[3] x\n\
float32[3] y\n\
float32[3] z\n\
\n\
# Color\n\
uint8[3] r\n\
uint8[3] g\n\
uint8[3] b\n\
uint8[3] a\n\
";
  }

  static const char* value(const ::voxblox_msgs::MeshBlock_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voxblox_msgs::MeshBlock_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.triangles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MeshBlock_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voxblox_msgs::MeshBlock_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voxblox_msgs::MeshBlock_<ContainerAllocator>& v)
  {
    s << indent << "index[]" << std::endl;
    for (size_t i = 0; i < v.index.size(); ++i)
    {
      s << indent << "  index[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.index[i]);
    }
    s << indent << "triangles[]" << std::endl;
    for (size_t i = 0; i < v.triangles.size(); ++i)
    {
      s << indent << "  triangles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::voxblox_msgs::Triangle_<ContainerAllocator> >::stream(s, indent + "    ", v.triangles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VOXBLOX_MSGS_MESSAGE_MESHBLOCK_H
