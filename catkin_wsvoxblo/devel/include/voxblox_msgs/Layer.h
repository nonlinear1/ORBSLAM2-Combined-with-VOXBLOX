// Generated by gencpp from file voxblox_msgs/Layer.msg
// DO NOT EDIT!


#ifndef VOXBLOX_MSGS_MESSAGE_LAYER_H
#define VOXBLOX_MSGS_MESSAGE_LAYER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <voxblox_msgs/Block.h>

namespace voxblox_msgs
{
template <class ContainerAllocator>
struct Layer_
{
  typedef Layer_<ContainerAllocator> Type;

  Layer_()
    : voxel_size(0.0)
    , voxels_per_side(0)
    , layer_type()
    , action(0)
    , blocks()  {
    }
  Layer_(const ContainerAllocator& _alloc)
    : voxel_size(0.0)
    , voxels_per_side(0)
    , layer_type(_alloc)
    , action(0)
    , blocks(_alloc)  {
  (void)_alloc;
    }



   typedef double _voxel_size_type;
  _voxel_size_type voxel_size;

   typedef uint32_t _voxels_per_side_type;
  _voxels_per_side_type voxels_per_side;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _layer_type_type;
  _layer_type_type layer_type;

   typedef uint8_t _action_type;
  _action_type action;

   typedef std::vector< ::voxblox_msgs::Block_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::voxblox_msgs::Block_<ContainerAllocator> >::other >  _blocks_type;
  _blocks_type blocks;



  enum {
    ACTION_UPDATE = 0u,
    ACTION_MERGE = 1u,
    ACTION_RESET = 2u,
  };


  typedef boost::shared_ptr< ::voxblox_msgs::Layer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voxblox_msgs::Layer_<ContainerAllocator> const> ConstPtr;

}; // struct Layer_

typedef ::voxblox_msgs::Layer_<std::allocator<void> > Layer;

typedef boost::shared_ptr< ::voxblox_msgs::Layer > LayerPtr;
typedef boost::shared_ptr< ::voxblox_msgs::Layer const> LayerConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voxblox_msgs::Layer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voxblox_msgs::Layer_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace voxblox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'voxblox_msgs': ['/home/best_jill_forever/catkin_ws/src/voxblox/voxblox_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::voxblox_msgs::Layer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voxblox_msgs::Layer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voxblox_msgs::Layer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voxblox_msgs::Layer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voxblox_msgs::Layer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voxblox_msgs::Layer_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voxblox_msgs::Layer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "97e0cb7d60607d9bc02f977d9f620620";
  }

  static const char* value(const ::voxblox_msgs::Layer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x97e0cb7d60607d9bULL;
  static const uint64_t static_value2 = 0xc02f977d9f620620ULL;
};

template<class ContainerAllocator>
struct DataType< ::voxblox_msgs::Layer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voxblox_msgs/Layer";
  }

  static const char* value(const ::voxblox_msgs::Layer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voxblox_msgs::Layer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Layer definitions\n\
float64 voxel_size\n\
uint32 voxels_per_side\n\
string layer_type  # See voxblox::voxel_types\n\
\n\
# Whether to send a full map or an incremental update.\n\
uint8 action   # See action defines below\n\
\n\
voxblox_msgs/Block[] blocks\n\
\n\
# Action definitions\n\
# Update all blocks that are part of this message to the new state,\n\
# leave the rest of the map as it was.\n\
uint8 ACTION_UPDATE = 0\n\
# Merge all blocks that are part of this message with the current state of\n\
# the map, leave the rest of the map as it was.\n\
uint8 ACTION_MERGE = 1\n\
# Set the layer to the state described by this message.\n\
uint8 ACTION_RESET = 2\n\
\n\
================================================================================\n\
MSG: voxblox_msgs/Block\n\
# Block indices -- as integers, actual position in space is function of\n\
# the voxel_size in the layer and voxels_per_side in the layer.\n\
int32 x_index\n\
int32 y_index\n\
int32 z_index\n\
\n\
# Voxel data packed in 4-byte chunks to better mirror protobuf serialization.\n\
uint32[] data\n\
";
  }

  static const char* value(const ::voxblox_msgs::Layer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voxblox_msgs::Layer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.voxel_size);
      stream.next(m.voxels_per_side);
      stream.next(m.layer_type);
      stream.next(m.action);
      stream.next(m.blocks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Layer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voxblox_msgs::Layer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voxblox_msgs::Layer_<ContainerAllocator>& v)
  {
    s << indent << "voxel_size: ";
    Printer<double>::stream(s, indent + "  ", v.voxel_size);
    s << indent << "voxels_per_side: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.voxels_per_side);
    s << indent << "layer_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.layer_type);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    s << indent << "blocks[]" << std::endl;
    for (size_t i = 0; i < v.blocks.size(); ++i)
    {
      s << indent << "  blocks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::voxblox_msgs::Block_<ContainerAllocator> >::stream(s, indent + "    ", v.blocks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VOXBLOX_MSGS_MESSAGE_LAYER_H
