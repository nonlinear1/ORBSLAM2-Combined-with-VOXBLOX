# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from voxblox_msgs/Layer.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import voxblox_msgs.msg

class Layer(genpy.Message):
  _md5sum = "97e0cb7d60607d9bc02f977d9f620620"
  _type = "voxblox_msgs/Layer"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Layer definitions
float64 voxel_size
uint32 voxels_per_side
string layer_type  # See voxblox::voxel_types

# Whether to send a full map or an incremental update.
uint8 action   # See action defines below

voxblox_msgs/Block[] blocks

# Action definitions
# Update all blocks that are part of this message to the new state,
# leave the rest of the map as it was.
uint8 ACTION_UPDATE = 0
# Merge all blocks that are part of this message with the current state of
# the map, leave the rest of the map as it was.
uint8 ACTION_MERGE = 1
# Set the layer to the state described by this message.
uint8 ACTION_RESET = 2

================================================================================
MSG: voxblox_msgs/Block
# Block indices -- as integers, actual position in space is function of
# the voxel_size in the layer and voxels_per_side in the layer.
int32 x_index
int32 y_index
int32 z_index

# Voxel data packed in 4-byte chunks to better mirror protobuf serialization.
uint32[] data
"""
  # Pseudo-constants
  ACTION_UPDATE = 0
  ACTION_MERGE = 1
  ACTION_RESET = 2

  __slots__ = ['voxel_size','voxels_per_side','layer_type','action','blocks']
  _slot_types = ['float64','uint32','string','uint8','voxblox_msgs/Block[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       voxel_size,voxels_per_side,layer_type,action,blocks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Layer, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.voxel_size is None:
        self.voxel_size = 0.
      if self.voxels_per_side is None:
        self.voxels_per_side = 0
      if self.layer_type is None:
        self.layer_type = ''
      if self.action is None:
        self.action = 0
      if self.blocks is None:
        self.blocks = []
    else:
      self.voxel_size = 0.
      self.voxels_per_side = 0
      self.layer_type = ''
      self.action = 0
      self.blocks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_dI().pack(_x.voxel_size, _x.voxels_per_side))
      _x = self.layer_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action))
      length = len(self.blocks)
      buff.write(_struct_I.pack(length))
      for val1 in self.blocks:
        _x = val1
        buff.write(_get_struct_3i().pack(_x.x_index, _x.y_index, _x.z_index))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.pack(pattern, *val1.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.blocks is None:
        self.blocks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.voxel_size, _x.voxels_per_side,) = _get_struct_dI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.layer_type = str[start:end].decode('utf-8')
      else:
        self.layer_type = str[start:end]
      start = end
      end += 1
      (self.action,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.blocks = []
      for i in range(0, length):
        val1 = voxblox_msgs.msg.Block()
        _x = val1
        start = end
        end += 12
        (_x.x_index, _x.y_index, _x.z_index,) = _get_struct_3i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.blocks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_dI().pack(_x.voxel_size, _x.voxels_per_side))
      _x = self.layer_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action))
      length = len(self.blocks)
      buff.write(_struct_I.pack(length))
      for val1 in self.blocks:
        _x = val1
        buff.write(_get_struct_3i().pack(_x.x_index, _x.y_index, _x.z_index))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.blocks is None:
        self.blocks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.voxel_size, _x.voxels_per_side,) = _get_struct_dI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.layer_type = str[start:end].decode('utf-8')
      else:
        self.layer_type = str[start:end]
      start = end
      end += 1
      (self.action,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.blocks = []
      for i in range(0, length):
        val1 = voxblox_msgs.msg.Block()
        _x = val1
        start = end
        end += 12
        (_x.x_index, _x.y_index, _x.z_index,) = _get_struct_3i().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.blocks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_dI = None
def _get_struct_dI():
    global _struct_dI
    if _struct_dI is None:
        _struct_dI = struct.Struct("<dI")
    return _struct_dI
