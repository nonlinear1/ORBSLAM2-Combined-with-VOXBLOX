# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from voxblox_msgs/Mesh.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import voxblox_msgs.msg
import std_msgs.msg

class Mesh(genpy.Message):
  _md5sum = "ca70fabcc211b61f795cb5e7c8210eb6"
  _type = "voxblox_msgs/Mesh"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

voxblox_msgs/MeshBlock[] mesh_blocks

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: voxblox_msgs/MeshBlock
# Index of meshed points in block map
int64[3] index

voxblox_msgs/Triangle[] triangles

================================================================================
MSG: voxblox_msgs/Triangle
# Colored triangle used in meshing

# Position
float32[3] x
float32[3] y
float32[3] z

# Color
uint8[3] r
uint8[3] g
uint8[3] b
uint8[3] a
"""
  __slots__ = ['header','mesh_blocks']
  _slot_types = ['std_msgs/Header','voxblox_msgs/MeshBlock[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,mesh_blocks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Mesh, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mesh_blocks is None:
        self.mesh_blocks = []
    else:
      self.header = std_msgs.msg.Header()
      self.mesh_blocks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.mesh_blocks)
      buff.write(_struct_I.pack(length))
      for val1 in self.mesh_blocks:
        buff.write(_get_struct_3q().pack(*val1.index))
        length = len(val1.triangles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.triangles:
          buff.write(_get_struct_3f().pack(*val2.x))
          buff.write(_get_struct_3f().pack(*val2.y))
          buff.write(_get_struct_3f().pack(*val2.z))
          _x = val2.r
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(_get_struct_3B().pack(*_x))
          else:
            buff.write(_get_struct_3s().pack(_x))
          _x = val2.g
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(_get_struct_3B().pack(*_x))
          else:
            buff.write(_get_struct_3s().pack(_x))
          _x = val2.b
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(_get_struct_3B().pack(*_x))
          else:
            buff.write(_get_struct_3s().pack(_x))
          _x = val2.a
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(_get_struct_3B().pack(*_x))
          else:
            buff.write(_get_struct_3s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mesh_blocks is None:
        self.mesh_blocks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mesh_blocks = []
      for i in range(0, length):
        val1 = voxblox_msgs.msg.MeshBlock()
        start = end
        end += 24
        val1.index = _get_struct_3q().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.triangles = []
        for i in range(0, length):
          val2 = voxblox_msgs.msg.Triangle()
          start = end
          end += 12
          val2.x = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 12
          val2.y = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 12
          val2.z = _get_struct_3f().unpack(str[start:end])
          start = end
          end += 3
          val2.r = str[start:end]
          start = end
          end += 3
          val2.g = str[start:end]
          start = end
          end += 3
          val2.b = str[start:end]
          start = end
          end += 3
          val2.a = str[start:end]
          val1.triangles.append(val2)
        self.mesh_blocks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.mesh_blocks)
      buff.write(_struct_I.pack(length))
      for val1 in self.mesh_blocks:
        buff.write(val1.index.tostring())
        length = len(val1.triangles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.triangles:
          buff.write(val2.x.tostring())
          buff.write(val2.y.tostring())
          buff.write(val2.z.tostring())
          _x = val2.r
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(_get_struct_3B().pack(*_x))
          else:
            buff.write(_get_struct_3s().pack(_x))
          _x = val2.g
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(_get_struct_3B().pack(*_x))
          else:
            buff.write(_get_struct_3s().pack(_x))
          _x = val2.b
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(_get_struct_3B().pack(*_x))
          else:
            buff.write(_get_struct_3s().pack(_x))
          _x = val2.a
          # - if encoded as a list instead, serialize as bytes instead of string
          if type(_x) in [list, tuple]:
            buff.write(_get_struct_3B().pack(*_x))
          else:
            buff.write(_get_struct_3s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mesh_blocks is None:
        self.mesh_blocks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mesh_blocks = []
      for i in range(0, length):
        val1 = voxblox_msgs.msg.MeshBlock()
        start = end
        end += 24
        val1.index = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.triangles = []
        for i in range(0, length):
          val2 = voxblox_msgs.msg.Triangle()
          start = end
          end += 12
          val2.x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
          start = end
          end += 12
          val2.y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
          start = end
          end += 12
          val2.z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
          start = end
          end += 3
          val2.r = str[start:end]
          start = end
          end += 3
          val2.g = str[start:end]
          start = end
          end += 3
          val2.b = str[start:end]
          start = end
          end += 3
          val2.a = str[start:end]
          val1.triangles.append(val2)
        self.mesh_blocks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3s = None
def _get_struct_3s():
    global _struct_3s
    if _struct_3s is None:
        _struct_3s = struct.Struct("<3s")
    return _struct_3s
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3q = None
def _get_struct_3q():
    global _struct_3q
    if _struct_3q is None:
        _struct_3q = struct.Struct("<3q")
    return _struct_3q
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
