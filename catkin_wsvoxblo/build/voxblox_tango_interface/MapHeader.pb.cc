// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapHeader.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MapHeader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tsdf2 {

namespace {

const ::google::protobuf::Descriptor* MapHeaderProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapHeaderProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MapHeader_2eproto() {
  protobuf_AddDesc_MapHeader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MapHeader.proto");
  GOOGLE_CHECK(file != NULL);
  MapHeaderProto_descriptor_ = file->message_type(0);
  static const int MapHeaderProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHeaderProto, voxel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHeaderProto, voxels_per_volume_side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHeaderProto, max_ntsdf_voxel_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHeaderProto, use_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHeaderProto, meters_to_ntsdf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHeaderProto, num_volumes_),
  };
  MapHeaderProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapHeaderProto_descriptor_,
      MapHeaderProto::default_instance_,
      MapHeaderProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHeaderProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapHeaderProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapHeaderProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MapHeader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapHeaderProto_descriptor_, &MapHeaderProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MapHeader_2eproto() {
  delete MapHeaderProto::default_instance_;
  delete MapHeaderProto_reflection_;
}

void protobuf_AddDesc_MapHeader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MapHeader.proto\022\005tsdf2\"\245\001\n\016MapHeaderPr"
    "oto\022\022\n\nvoxel_size\030\001 \001(\001\022\036\n\026voxels_per_vo"
    "lume_side\030\002 \001(\001\022\036\n\026max_ntsdf_voxel_weigh"
    "t\030\003 \001(\r\022\021\n\tuse_color\030\004 \001(\010\022\027\n\017meters_to_"
    "ntsdf\030\005 \001(\001\022\023\n\013num_volumes\030\006 \001(\r", 192);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MapHeader.proto", &protobuf_RegisterTypes);
  MapHeaderProto::default_instance_ = new MapHeaderProto();
  MapHeaderProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MapHeader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MapHeader_2eproto {
  StaticDescriptorInitializer_MapHeader_2eproto() {
    protobuf_AddDesc_MapHeader_2eproto();
  }
} static_descriptor_initializer_MapHeader_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MapHeaderProto::kVoxelSizeFieldNumber;
const int MapHeaderProto::kVoxelsPerVolumeSideFieldNumber;
const int MapHeaderProto::kMaxNtsdfVoxelWeightFieldNumber;
const int MapHeaderProto::kUseColorFieldNumber;
const int MapHeaderProto::kMetersToNtsdfFieldNumber;
const int MapHeaderProto::kNumVolumesFieldNumber;
#endif  // !_MSC_VER

MapHeaderProto::MapHeaderProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tsdf2.MapHeaderProto)
}

void MapHeaderProto::InitAsDefaultInstance() {
}

MapHeaderProto::MapHeaderProto(const MapHeaderProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tsdf2.MapHeaderProto)
}

void MapHeaderProto::SharedCtor() {
  _cached_size_ = 0;
  voxel_size_ = 0;
  voxels_per_volume_side_ = 0;
  max_ntsdf_voxel_weight_ = 0u;
  use_color_ = false;
  meters_to_ntsdf_ = 0;
  num_volumes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapHeaderProto::~MapHeaderProto() {
  // @@protoc_insertion_point(destructor:tsdf2.MapHeaderProto)
  SharedDtor();
}

void MapHeaderProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapHeaderProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapHeaderProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapHeaderProto_descriptor_;
}

const MapHeaderProto& MapHeaderProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapHeader_2eproto();
  return *default_instance_;
}

MapHeaderProto* MapHeaderProto::default_instance_ = NULL;

MapHeaderProto* MapHeaderProto::New() const {
  return new MapHeaderProto;
}

void MapHeaderProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MapHeaderProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(voxel_size_, num_volumes_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapHeaderProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tsdf2.MapHeaderProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double voxel_size = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voxel_size_)));
          set_has_voxel_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_voxels_per_volume_side;
        break;
      }

      // optional double voxels_per_volume_side = 2;
      case 2: {
        if (tag == 17) {
         parse_voxels_per_volume_side:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voxels_per_volume_side_)));
          set_has_voxels_per_volume_side();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_ntsdf_voxel_weight;
        break;
      }

      // optional uint32 max_ntsdf_voxel_weight = 3;
      case 3: {
        if (tag == 24) {
         parse_max_ntsdf_voxel_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ntsdf_voxel_weight_)));
          set_has_max_ntsdf_voxel_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_use_color;
        break;
      }

      // optional bool use_color = 4;
      case 4: {
        if (tag == 32) {
         parse_use_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_color_)));
          set_has_use_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_meters_to_ntsdf;
        break;
      }

      // optional double meters_to_ntsdf = 5;
      case 5: {
        if (tag == 41) {
         parse_meters_to_ntsdf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &meters_to_ntsdf_)));
          set_has_meters_to_ntsdf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_volumes;
        break;
      }

      // optional uint32 num_volumes = 6;
      case 6: {
        if (tag == 48) {
         parse_num_volumes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_volumes_)));
          set_has_num_volumes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tsdf2.MapHeaderProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tsdf2.MapHeaderProto)
  return false;
#undef DO_
}

void MapHeaderProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tsdf2.MapHeaderProto)
  // optional double voxel_size = 1;
  if (has_voxel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->voxel_size(), output);
  }

  // optional double voxels_per_volume_side = 2;
  if (has_voxels_per_volume_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->voxels_per_volume_side(), output);
  }

  // optional uint32 max_ntsdf_voxel_weight = 3;
  if (has_max_ntsdf_voxel_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_ntsdf_voxel_weight(), output);
  }

  // optional bool use_color = 4;
  if (has_use_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_color(), output);
  }

  // optional double meters_to_ntsdf = 5;
  if (has_meters_to_ntsdf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->meters_to_ntsdf(), output);
  }

  // optional uint32 num_volumes = 6;
  if (has_num_volumes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_volumes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tsdf2.MapHeaderProto)
}

::google::protobuf::uint8* MapHeaderProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tsdf2.MapHeaderProto)
  // optional double voxel_size = 1;
  if (has_voxel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->voxel_size(), target);
  }

  // optional double voxels_per_volume_side = 2;
  if (has_voxels_per_volume_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->voxels_per_volume_side(), target);
  }

  // optional uint32 max_ntsdf_voxel_weight = 3;
  if (has_max_ntsdf_voxel_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_ntsdf_voxel_weight(), target);
  }

  // optional bool use_color = 4;
  if (has_use_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_color(), target);
  }

  // optional double meters_to_ntsdf = 5;
  if (has_meters_to_ntsdf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->meters_to_ntsdf(), target);
  }

  // optional uint32 num_volumes = 6;
  if (has_num_volumes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_volumes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tsdf2.MapHeaderProto)
  return target;
}

int MapHeaderProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double voxel_size = 1;
    if (has_voxel_size()) {
      total_size += 1 + 8;
    }

    // optional double voxels_per_volume_side = 2;
    if (has_voxels_per_volume_side()) {
      total_size += 1 + 8;
    }

    // optional uint32 max_ntsdf_voxel_weight = 3;
    if (has_max_ntsdf_voxel_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ntsdf_voxel_weight());
    }

    // optional bool use_color = 4;
    if (has_use_color()) {
      total_size += 1 + 1;
    }

    // optional double meters_to_ntsdf = 5;
    if (has_meters_to_ntsdf()) {
      total_size += 1 + 8;
    }

    // optional uint32 num_volumes = 6;
    if (has_num_volumes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_volumes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapHeaderProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapHeaderProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapHeaderProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapHeaderProto::MergeFrom(const MapHeaderProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voxel_size()) {
      set_voxel_size(from.voxel_size());
    }
    if (from.has_voxels_per_volume_side()) {
      set_voxels_per_volume_side(from.voxels_per_volume_side());
    }
    if (from.has_max_ntsdf_voxel_weight()) {
      set_max_ntsdf_voxel_weight(from.max_ntsdf_voxel_weight());
    }
    if (from.has_use_color()) {
      set_use_color(from.use_color());
    }
    if (from.has_meters_to_ntsdf()) {
      set_meters_to_ntsdf(from.meters_to_ntsdf());
    }
    if (from.has_num_volumes()) {
      set_num_volumes(from.num_volumes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapHeaderProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapHeaderProto::CopyFrom(const MapHeaderProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapHeaderProto::IsInitialized() const {

  return true;
}

void MapHeaderProto::Swap(MapHeaderProto* other) {
  if (other != this) {
    std::swap(voxel_size_, other->voxel_size_);
    std::swap(voxels_per_volume_side_, other->voxels_per_volume_side_);
    std::swap(max_ntsdf_voxel_weight_, other->max_ntsdf_voxel_weight_);
    std::swap(use_color_, other->use_color_);
    std::swap(meters_to_ntsdf_, other->meters_to_ntsdf_);
    std::swap(num_volumes_, other->num_volumes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapHeaderProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapHeaderProto_descriptor_;
  metadata.reflection = MapHeaderProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tsdf2

// @@protoc_insertion_point(global_scope)
