// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Volume.proto

#ifndef PROTOBUF_Volume_2eproto__INCLUDED
#define PROTOBUF_Volume_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tsdf2 {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Volume_2eproto();
void protobuf_AssignDesc_Volume_2eproto();
void protobuf_ShutdownFile_Volume_2eproto();

class VolumeProto;
class VolumeProto_GridIndex;
class VolumeProto_Vector3dProto;

// ===================================================================

class VolumeProto_GridIndex : public ::google::protobuf::Message {
 public:
  VolumeProto_GridIndex();
  virtual ~VolumeProto_GridIndex();

  VolumeProto_GridIndex(const VolumeProto_GridIndex& from);

  inline VolumeProto_GridIndex& operator=(const VolumeProto_GridIndex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VolumeProto_GridIndex& default_instance();

  void Swap(VolumeProto_GridIndex* other);

  // implements Message ----------------------------------------------

  VolumeProto_GridIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VolumeProto_GridIndex& from);
  void MergeFrom(const VolumeProto_GridIndex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tsdf2.VolumeProto.GridIndex)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  friend void  protobuf_AddDesc_Volume_2eproto();
  friend void protobuf_AssignDesc_Volume_2eproto();
  friend void protobuf_ShutdownFile_Volume_2eproto();

  void InitAsDefaultInstance();
  static VolumeProto_GridIndex* default_instance_;
};
// -------------------------------------------------------------------

class VolumeProto_Vector3dProto : public ::google::protobuf::Message {
 public:
  VolumeProto_Vector3dProto();
  virtual ~VolumeProto_Vector3dProto();

  VolumeProto_Vector3dProto(const VolumeProto_Vector3dProto& from);

  inline VolumeProto_Vector3dProto& operator=(const VolumeProto_Vector3dProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VolumeProto_Vector3dProto& default_instance();

  void Swap(VolumeProto_Vector3dProto* other);

  // implements Message ----------------------------------------------

  VolumeProto_Vector3dProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VolumeProto_Vector3dProto& from);
  void MergeFrom(const VolumeProto_Vector3dProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:tsdf2.VolumeProto.Vector3dProto)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_Volume_2eproto();
  friend void protobuf_AssignDesc_Volume_2eproto();
  friend void protobuf_ShutdownFile_Volume_2eproto();

  void InitAsDefaultInstance();
  static VolumeProto_Vector3dProto* default_instance_;
};
// -------------------------------------------------------------------

class VolumeProto : public ::google::protobuf::Message {
 public:
  VolumeProto();
  virtual ~VolumeProto();

  VolumeProto(const VolumeProto& from);

  inline VolumeProto& operator=(const VolumeProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VolumeProto& default_instance();

  void Swap(VolumeProto* other);

  // implements Message ----------------------------------------------

  VolumeProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VolumeProto& from);
  void MergeFrom(const VolumeProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VolumeProto_GridIndex GridIndex;
  typedef VolumeProto_Vector3dProto Vector3dProto;

  // accessors -------------------------------------------------------

  // optional int32 voxels_per_side = 1;
  inline bool has_voxels_per_side() const;
  inline void clear_voxels_per_side();
  static const int kVoxelsPerSideFieldNumber = 1;
  inline ::google::protobuf::int32 voxels_per_side() const;
  inline void set_voxels_per_side(::google::protobuf::int32 value);

  // optional double voxel_size = 2;
  inline bool has_voxel_size() const;
  inline void clear_voxel_size();
  static const int kVoxelSizeFieldNumber = 2;
  inline double voxel_size() const;
  inline void set_voxel_size(double value);

  // optional uint32 max_ntsdf_voxel_weight = 3;
  inline bool has_max_ntsdf_voxel_weight() const;
  inline void clear_max_ntsdf_voxel_weight();
  static const int kMaxNtsdfVoxelWeightFieldNumber = 3;
  inline ::google::protobuf::uint32 max_ntsdf_voxel_weight() const;
  inline void set_max_ntsdf_voxel_weight(::google::protobuf::uint32 value);

  // optional .tsdf2.VolumeProto.Vector3dProto origin = 4 [deprecated = true];
  inline bool has_origin() const PROTOBUF_DEPRECATED;
  inline void clear_origin() PROTOBUF_DEPRECATED;
  static const int kOriginFieldNumber = 4;
  inline const ::tsdf2::VolumeProto_Vector3dProto& origin() const PROTOBUF_DEPRECATED;
  inline ::tsdf2::VolumeProto_Vector3dProto* mutable_origin() PROTOBUF_DEPRECATED;
  inline ::tsdf2::VolumeProto_Vector3dProto* release_origin() PROTOBUF_DEPRECATED;
  inline void set_allocated_origin(::tsdf2::VolumeProto_Vector3dProto* origin) PROTOBUF_DEPRECATED;

  // optional .tsdf2.VolumeProto.GridIndex index = 8;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 8;
  inline const ::tsdf2::VolumeProto_GridIndex& index() const;
  inline ::tsdf2::VolumeProto_GridIndex* mutable_index();
  inline ::tsdf2::VolumeProto_GridIndex* release_index();
  inline void set_allocated_index(::tsdf2::VolumeProto_GridIndex* index);

  // optional bool has_data = 5;
  inline bool has_has_data() const;
  inline void clear_has_data();
  static const int kHasDataFieldNumber = 5;
  inline bool has_data() const;
  inline void set_has_data(bool value);

  // repeated uint32 ntsdf_voxels = 6 [packed = true];
  inline int ntsdf_voxels_size() const;
  inline void clear_ntsdf_voxels();
  static const int kNtsdfVoxelsFieldNumber = 6;
  inline ::google::protobuf::uint32 ntsdf_voxels(int index) const;
  inline void set_ntsdf_voxels(int index, ::google::protobuf::uint32 value);
  inline void add_ntsdf_voxels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ntsdf_voxels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ntsdf_voxels();

  // repeated uint32 color_voxels = 7 [packed = true];
  inline int color_voxels_size() const;
  inline void clear_color_voxels();
  static const int kColorVoxelsFieldNumber = 7;
  inline ::google::protobuf::uint32 color_voxels(int index) const;
  inline void set_color_voxels(int index, ::google::protobuf::uint32 value);
  inline void add_color_voxels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      color_voxels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_color_voxels();

  // @@protoc_insertion_point(class_scope:tsdf2.VolumeProto)
 private:
  inline void set_has_voxels_per_side();
  inline void clear_has_voxels_per_side();
  inline void set_has_voxel_size();
  inline void clear_has_voxel_size();
  inline void set_has_max_ntsdf_voxel_weight();
  inline void clear_has_max_ntsdf_voxel_weight();
  inline void set_has_origin();
  inline void clear_has_origin();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_has_data();
  inline void clear_has_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double voxel_size_;
  ::google::protobuf::int32 voxels_per_side_;
  ::google::protobuf::uint32 max_ntsdf_voxel_weight_;
  ::tsdf2::VolumeProto_Vector3dProto* origin_;
  ::tsdf2::VolumeProto_GridIndex* index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ntsdf_voxels_;
  mutable int _ntsdf_voxels_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > color_voxels_;
  mutable int _color_voxels_cached_byte_size_;
  bool has_data_;
  friend void  protobuf_AddDesc_Volume_2eproto();
  friend void protobuf_AssignDesc_Volume_2eproto();
  friend void protobuf_ShutdownFile_Volume_2eproto();

  void InitAsDefaultInstance();
  static VolumeProto* default_instance_;
};
// ===================================================================


// ===================================================================

// VolumeProto_GridIndex

// required int32 x = 1;
inline bool VolumeProto_GridIndex::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VolumeProto_GridIndex::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VolumeProto_GridIndex::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VolumeProto_GridIndex::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 VolumeProto_GridIndex::x() const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.GridIndex.x)
  return x_;
}
inline void VolumeProto_GridIndex::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tsdf2.VolumeProto.GridIndex.x)
}

// required int32 y = 2;
inline bool VolumeProto_GridIndex::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VolumeProto_GridIndex::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VolumeProto_GridIndex::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VolumeProto_GridIndex::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 VolumeProto_GridIndex::y() const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.GridIndex.y)
  return y_;
}
inline void VolumeProto_GridIndex::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tsdf2.VolumeProto.GridIndex.y)
}

// required int32 z = 3;
inline bool VolumeProto_GridIndex::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VolumeProto_GridIndex::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VolumeProto_GridIndex::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VolumeProto_GridIndex::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 VolumeProto_GridIndex::z() const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.GridIndex.z)
  return z_;
}
inline void VolumeProto_GridIndex::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:tsdf2.VolumeProto.GridIndex.z)
}

// -------------------------------------------------------------------

// VolumeProto_Vector3dProto

// required double x = 1;
inline bool VolumeProto_Vector3dProto::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VolumeProto_Vector3dProto::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VolumeProto_Vector3dProto::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VolumeProto_Vector3dProto::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double VolumeProto_Vector3dProto::x() const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.Vector3dProto.x)
  return x_;
}
inline void VolumeProto_Vector3dProto::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tsdf2.VolumeProto.Vector3dProto.x)
}

// required double y = 2;
inline bool VolumeProto_Vector3dProto::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VolumeProto_Vector3dProto::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VolumeProto_Vector3dProto::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VolumeProto_Vector3dProto::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double VolumeProto_Vector3dProto::y() const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.Vector3dProto.y)
  return y_;
}
inline void VolumeProto_Vector3dProto::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tsdf2.VolumeProto.Vector3dProto.y)
}

// required double z = 3;
inline bool VolumeProto_Vector3dProto::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VolumeProto_Vector3dProto::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VolumeProto_Vector3dProto::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VolumeProto_Vector3dProto::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double VolumeProto_Vector3dProto::z() const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.Vector3dProto.z)
  return z_;
}
inline void VolumeProto_Vector3dProto::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:tsdf2.VolumeProto.Vector3dProto.z)
}

// -------------------------------------------------------------------

// VolumeProto

// optional int32 voxels_per_side = 1;
inline bool VolumeProto::has_voxels_per_side() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VolumeProto::set_has_voxels_per_side() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VolumeProto::clear_has_voxels_per_side() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VolumeProto::clear_voxels_per_side() {
  voxels_per_side_ = 0;
  clear_has_voxels_per_side();
}
inline ::google::protobuf::int32 VolumeProto::voxels_per_side() const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.voxels_per_side)
  return voxels_per_side_;
}
inline void VolumeProto::set_voxels_per_side(::google::protobuf::int32 value) {
  set_has_voxels_per_side();
  voxels_per_side_ = value;
  // @@protoc_insertion_point(field_set:tsdf2.VolumeProto.voxels_per_side)
}

// optional double voxel_size = 2;
inline bool VolumeProto::has_voxel_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VolumeProto::set_has_voxel_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VolumeProto::clear_has_voxel_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VolumeProto::clear_voxel_size() {
  voxel_size_ = 0;
  clear_has_voxel_size();
}
inline double VolumeProto::voxel_size() const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.voxel_size)
  return voxel_size_;
}
inline void VolumeProto::set_voxel_size(double value) {
  set_has_voxel_size();
  voxel_size_ = value;
  // @@protoc_insertion_point(field_set:tsdf2.VolumeProto.voxel_size)
}

// optional uint32 max_ntsdf_voxel_weight = 3;
inline bool VolumeProto::has_max_ntsdf_voxel_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VolumeProto::set_has_max_ntsdf_voxel_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VolumeProto::clear_has_max_ntsdf_voxel_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VolumeProto::clear_max_ntsdf_voxel_weight() {
  max_ntsdf_voxel_weight_ = 0u;
  clear_has_max_ntsdf_voxel_weight();
}
inline ::google::protobuf::uint32 VolumeProto::max_ntsdf_voxel_weight() const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.max_ntsdf_voxel_weight)
  return max_ntsdf_voxel_weight_;
}
inline void VolumeProto::set_max_ntsdf_voxel_weight(::google::protobuf::uint32 value) {
  set_has_max_ntsdf_voxel_weight();
  max_ntsdf_voxel_weight_ = value;
  // @@protoc_insertion_point(field_set:tsdf2.VolumeProto.max_ntsdf_voxel_weight)
}

// optional .tsdf2.VolumeProto.Vector3dProto origin = 4 [deprecated = true];
inline bool VolumeProto::has_origin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VolumeProto::set_has_origin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VolumeProto::clear_has_origin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VolumeProto::clear_origin() {
  if (origin_ != NULL) origin_->::tsdf2::VolumeProto_Vector3dProto::Clear();
  clear_has_origin();
}
inline const ::tsdf2::VolumeProto_Vector3dProto& VolumeProto::origin() const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::tsdf2::VolumeProto_Vector3dProto* VolumeProto::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::tsdf2::VolumeProto_Vector3dProto;
  // @@protoc_insertion_point(field_mutable:tsdf2.VolumeProto.origin)
  return origin_;
}
inline ::tsdf2::VolumeProto_Vector3dProto* VolumeProto::release_origin() {
  clear_has_origin();
  ::tsdf2::VolumeProto_Vector3dProto* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void VolumeProto::set_allocated_origin(::tsdf2::VolumeProto_Vector3dProto* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:tsdf2.VolumeProto.origin)
}

// optional .tsdf2.VolumeProto.GridIndex index = 8;
inline bool VolumeProto::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VolumeProto::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VolumeProto::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VolumeProto::clear_index() {
  if (index_ != NULL) index_->::tsdf2::VolumeProto_GridIndex::Clear();
  clear_has_index();
}
inline const ::tsdf2::VolumeProto_GridIndex& VolumeProto::index() const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.index)
  return index_ != NULL ? *index_ : *default_instance_->index_;
}
inline ::tsdf2::VolumeProto_GridIndex* VolumeProto::mutable_index() {
  set_has_index();
  if (index_ == NULL) index_ = new ::tsdf2::VolumeProto_GridIndex;
  // @@protoc_insertion_point(field_mutable:tsdf2.VolumeProto.index)
  return index_;
}
inline ::tsdf2::VolumeProto_GridIndex* VolumeProto::release_index() {
  clear_has_index();
  ::tsdf2::VolumeProto_GridIndex* temp = index_;
  index_ = NULL;
  return temp;
}
inline void VolumeProto::set_allocated_index(::tsdf2::VolumeProto_GridIndex* index) {
  delete index_;
  index_ = index;
  if (index) {
    set_has_index();
  } else {
    clear_has_index();
  }
  // @@protoc_insertion_point(field_set_allocated:tsdf2.VolumeProto.index)
}

// optional bool has_data = 5;
inline bool VolumeProto::has_has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VolumeProto::set_has_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VolumeProto::clear_has_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VolumeProto::clear_has_data() {
  has_data_ = false;
  clear_has_has_data();
}
inline bool VolumeProto::has_data() const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.has_data)
  return has_data_;
}
inline void VolumeProto::set_has_data(bool value) {
  set_has_has_data();
  has_data_ = value;
  // @@protoc_insertion_point(field_set:tsdf2.VolumeProto.has_data)
}

// repeated uint32 ntsdf_voxels = 6 [packed = true];
inline int VolumeProto::ntsdf_voxels_size() const {
  return ntsdf_voxels_.size();
}
inline void VolumeProto::clear_ntsdf_voxels() {
  ntsdf_voxels_.Clear();
}
inline ::google::protobuf::uint32 VolumeProto::ntsdf_voxels(int index) const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.ntsdf_voxels)
  return ntsdf_voxels_.Get(index);
}
inline void VolumeProto::set_ntsdf_voxels(int index, ::google::protobuf::uint32 value) {
  ntsdf_voxels_.Set(index, value);
  // @@protoc_insertion_point(field_set:tsdf2.VolumeProto.ntsdf_voxels)
}
inline void VolumeProto::add_ntsdf_voxels(::google::protobuf::uint32 value) {
  ntsdf_voxels_.Add(value);
  // @@protoc_insertion_point(field_add:tsdf2.VolumeProto.ntsdf_voxels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VolumeProto::ntsdf_voxels() const {
  // @@protoc_insertion_point(field_list:tsdf2.VolumeProto.ntsdf_voxels)
  return ntsdf_voxels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VolumeProto::mutable_ntsdf_voxels() {
  // @@protoc_insertion_point(field_mutable_list:tsdf2.VolumeProto.ntsdf_voxels)
  return &ntsdf_voxels_;
}

// repeated uint32 color_voxels = 7 [packed = true];
inline int VolumeProto::color_voxels_size() const {
  return color_voxels_.size();
}
inline void VolumeProto::clear_color_voxels() {
  color_voxels_.Clear();
}
inline ::google::protobuf::uint32 VolumeProto::color_voxels(int index) const {
  // @@protoc_insertion_point(field_get:tsdf2.VolumeProto.color_voxels)
  return color_voxels_.Get(index);
}
inline void VolumeProto::set_color_voxels(int index, ::google::protobuf::uint32 value) {
  color_voxels_.Set(index, value);
  // @@protoc_insertion_point(field_set:tsdf2.VolumeProto.color_voxels)
}
inline void VolumeProto::add_color_voxels(::google::protobuf::uint32 value) {
  color_voxels_.Add(value);
  // @@protoc_insertion_point(field_add:tsdf2.VolumeProto.color_voxels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VolumeProto::color_voxels() const {
  // @@protoc_insertion_point(field_list:tsdf2.VolumeProto.color_voxels)
  return color_voxels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VolumeProto::mutable_color_voxels() {
  // @@protoc_insertion_point(field_mutable_list:tsdf2.VolumeProto.color_voxels)
  return &color_voxels_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tsdf2

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Volume_2eproto__INCLUDED
