// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Volume.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Volume.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tsdf2 {

namespace {

const ::google::protobuf::Descriptor* VolumeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VolumeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* VolumeProto_GridIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VolumeProto_GridIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* VolumeProto_Vector3dProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VolumeProto_Vector3dProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Volume_2eproto() {
  protobuf_AddDesc_Volume_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Volume.proto");
  GOOGLE_CHECK(file != NULL);
  VolumeProto_descriptor_ = file->message_type(0);
  static const int VolumeProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto, voxels_per_side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto, voxel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto, max_ntsdf_voxel_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto, has_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto, ntsdf_voxels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto, color_voxels_),
  };
  VolumeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VolumeProto_descriptor_,
      VolumeProto::default_instance_,
      VolumeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VolumeProto));
  VolumeProto_GridIndex_descriptor_ = VolumeProto_descriptor_->nested_type(0);
  static const int VolumeProto_GridIndex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto_GridIndex, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto_GridIndex, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto_GridIndex, z_),
  };
  VolumeProto_GridIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VolumeProto_GridIndex_descriptor_,
      VolumeProto_GridIndex::default_instance_,
      VolumeProto_GridIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto_GridIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto_GridIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VolumeProto_GridIndex));
  VolumeProto_Vector3dProto_descriptor_ = VolumeProto_descriptor_->nested_type(1);
  static const int VolumeProto_Vector3dProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto_Vector3dProto, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto_Vector3dProto, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto_Vector3dProto, z_),
  };
  VolumeProto_Vector3dProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VolumeProto_Vector3dProto_descriptor_,
      VolumeProto_Vector3dProto::default_instance_,
      VolumeProto_Vector3dProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto_Vector3dProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeProto_Vector3dProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VolumeProto_Vector3dProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Volume_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VolumeProto_descriptor_, &VolumeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VolumeProto_GridIndex_descriptor_, &VolumeProto_GridIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VolumeProto_Vector3dProto_descriptor_, &VolumeProto_Vector3dProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Volume_2eproto() {
  delete VolumeProto::default_instance_;
  delete VolumeProto_reflection_;
  delete VolumeProto_GridIndex::default_instance_;
  delete VolumeProto_GridIndex_reflection_;
  delete VolumeProto_Vector3dProto::default_instance_;
  delete VolumeProto_Vector3dProto_reflection_;
}

void protobuf_AddDesc_Volume_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Volume.proto\022\005tsdf2\"\343\002\n\013VolumeProto\022\027\n"
    "\017voxels_per_side\030\001 \001(\005\022\022\n\nvoxel_size\030\002 \001"
    "(\001\022\036\n\026max_ntsdf_voxel_weight\030\003 \001(\r\0224\n\006or"
    "igin\030\004 \001(\0132 .tsdf2.VolumeProto.Vector3dP"
    "rotoB\002\030\001\022+\n\005index\030\010 \001(\0132\034.tsdf2.VolumePr"
    "oto.GridIndex\022\020\n\010has_data\030\005 \001(\010\022\030\n\014ntsdf"
    "_voxels\030\006 \003(\rB\002\020\001\022\030\n\014color_voxels\030\007 \003(\rB"
    "\002\020\001\032,\n\tGridIndex\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\t"
    "\n\001z\030\003 \002(\005\0320\n\rVector3dProto\022\t\n\001x\030\001 \002(\001\022\t\n"
    "\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001", 379);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Volume.proto", &protobuf_RegisterTypes);
  VolumeProto::default_instance_ = new VolumeProto();
  VolumeProto_GridIndex::default_instance_ = new VolumeProto_GridIndex();
  VolumeProto_Vector3dProto::default_instance_ = new VolumeProto_Vector3dProto();
  VolumeProto::default_instance_->InitAsDefaultInstance();
  VolumeProto_GridIndex::default_instance_->InitAsDefaultInstance();
  VolumeProto_Vector3dProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Volume_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Volume_2eproto {
  StaticDescriptorInitializer_Volume_2eproto() {
    protobuf_AddDesc_Volume_2eproto();
  }
} static_descriptor_initializer_Volume_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VolumeProto_GridIndex::kXFieldNumber;
const int VolumeProto_GridIndex::kYFieldNumber;
const int VolumeProto_GridIndex::kZFieldNumber;
#endif  // !_MSC_VER

VolumeProto_GridIndex::VolumeProto_GridIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tsdf2.VolumeProto.GridIndex)
}

void VolumeProto_GridIndex::InitAsDefaultInstance() {
}

VolumeProto_GridIndex::VolumeProto_GridIndex(const VolumeProto_GridIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tsdf2.VolumeProto.GridIndex)
}

void VolumeProto_GridIndex::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VolumeProto_GridIndex::~VolumeProto_GridIndex() {
  // @@protoc_insertion_point(destructor:tsdf2.VolumeProto.GridIndex)
  SharedDtor();
}

void VolumeProto_GridIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VolumeProto_GridIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VolumeProto_GridIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VolumeProto_GridIndex_descriptor_;
}

const VolumeProto_GridIndex& VolumeProto_GridIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Volume_2eproto();
  return *default_instance_;
}

VolumeProto_GridIndex* VolumeProto_GridIndex::default_instance_ = NULL;

VolumeProto_GridIndex* VolumeProto_GridIndex::New() const {
  return new VolumeProto_GridIndex;
}

void VolumeProto_GridIndex::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VolumeProto_GridIndex*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VolumeProto_GridIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tsdf2.VolumeProto.GridIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // required int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tsdf2.VolumeProto.GridIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tsdf2.VolumeProto.GridIndex)
  return false;
#undef DO_
}

void VolumeProto_GridIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tsdf2.VolumeProto.GridIndex)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tsdf2.VolumeProto.GridIndex)
}

::google::protobuf::uint8* VolumeProto_GridIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tsdf2.VolumeProto.GridIndex)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tsdf2.VolumeProto.GridIndex)
  return target;
}

int VolumeProto_GridIndex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VolumeProto_GridIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VolumeProto_GridIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VolumeProto_GridIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VolumeProto_GridIndex::MergeFrom(const VolumeProto_GridIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VolumeProto_GridIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeProto_GridIndex::CopyFrom(const VolumeProto_GridIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeProto_GridIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VolumeProto_GridIndex::Swap(VolumeProto_GridIndex* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VolumeProto_GridIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VolumeProto_GridIndex_descriptor_;
  metadata.reflection = VolumeProto_GridIndex_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int VolumeProto_Vector3dProto::kXFieldNumber;
const int VolumeProto_Vector3dProto::kYFieldNumber;
const int VolumeProto_Vector3dProto::kZFieldNumber;
#endif  // !_MSC_VER

VolumeProto_Vector3dProto::VolumeProto_Vector3dProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tsdf2.VolumeProto.Vector3dProto)
}

void VolumeProto_Vector3dProto::InitAsDefaultInstance() {
}

VolumeProto_Vector3dProto::VolumeProto_Vector3dProto(const VolumeProto_Vector3dProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tsdf2.VolumeProto.Vector3dProto)
}

void VolumeProto_Vector3dProto::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VolumeProto_Vector3dProto::~VolumeProto_Vector3dProto() {
  // @@protoc_insertion_point(destructor:tsdf2.VolumeProto.Vector3dProto)
  SharedDtor();
}

void VolumeProto_Vector3dProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VolumeProto_Vector3dProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VolumeProto_Vector3dProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VolumeProto_Vector3dProto_descriptor_;
}

const VolumeProto_Vector3dProto& VolumeProto_Vector3dProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Volume_2eproto();
  return *default_instance_;
}

VolumeProto_Vector3dProto* VolumeProto_Vector3dProto::default_instance_ = NULL;

VolumeProto_Vector3dProto* VolumeProto_Vector3dProto::New() const {
  return new VolumeProto_Vector3dProto;
}

void VolumeProto_Vector3dProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VolumeProto_Vector3dProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VolumeProto_Vector3dProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tsdf2.VolumeProto.Vector3dProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tsdf2.VolumeProto.Vector3dProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tsdf2.VolumeProto.Vector3dProto)
  return false;
#undef DO_
}

void VolumeProto_Vector3dProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tsdf2.VolumeProto.Vector3dProto)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tsdf2.VolumeProto.Vector3dProto)
}

::google::protobuf::uint8* VolumeProto_Vector3dProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tsdf2.VolumeProto.Vector3dProto)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tsdf2.VolumeProto.Vector3dProto)
  return target;
}

int VolumeProto_Vector3dProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VolumeProto_Vector3dProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VolumeProto_Vector3dProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VolumeProto_Vector3dProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VolumeProto_Vector3dProto::MergeFrom(const VolumeProto_Vector3dProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VolumeProto_Vector3dProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeProto_Vector3dProto::CopyFrom(const VolumeProto_Vector3dProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeProto_Vector3dProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VolumeProto_Vector3dProto::Swap(VolumeProto_Vector3dProto* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VolumeProto_Vector3dProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VolumeProto_Vector3dProto_descriptor_;
  metadata.reflection = VolumeProto_Vector3dProto_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int VolumeProto::kVoxelsPerSideFieldNumber;
const int VolumeProto::kVoxelSizeFieldNumber;
const int VolumeProto::kMaxNtsdfVoxelWeightFieldNumber;
const int VolumeProto::kOriginFieldNumber;
const int VolumeProto::kIndexFieldNumber;
const int VolumeProto::kHasDataFieldNumber;
const int VolumeProto::kNtsdfVoxelsFieldNumber;
const int VolumeProto::kColorVoxelsFieldNumber;
#endif  // !_MSC_VER

VolumeProto::VolumeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tsdf2.VolumeProto)
}

void VolumeProto::InitAsDefaultInstance() {
  origin_ = const_cast< ::tsdf2::VolumeProto_Vector3dProto*>(&::tsdf2::VolumeProto_Vector3dProto::default_instance());
  index_ = const_cast< ::tsdf2::VolumeProto_GridIndex*>(&::tsdf2::VolumeProto_GridIndex::default_instance());
}

VolumeProto::VolumeProto(const VolumeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tsdf2.VolumeProto)
}

void VolumeProto::SharedCtor() {
  _cached_size_ = 0;
  voxels_per_side_ = 0;
  voxel_size_ = 0;
  max_ntsdf_voxel_weight_ = 0u;
  origin_ = NULL;
  index_ = NULL;
  has_data_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VolumeProto::~VolumeProto() {
  // @@protoc_insertion_point(destructor:tsdf2.VolumeProto)
  SharedDtor();
}

void VolumeProto::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
    delete index_;
  }
}

void VolumeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VolumeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VolumeProto_descriptor_;
}

const VolumeProto& VolumeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Volume_2eproto();
  return *default_instance_;
}

VolumeProto* VolumeProto::default_instance_ = NULL;

VolumeProto* VolumeProto::New() const {
  return new VolumeProto;
}

void VolumeProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VolumeProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(voxel_size_, max_ntsdf_voxel_weight_);
    if (has_origin()) {
      if (origin_ != NULL) origin_->::tsdf2::VolumeProto_Vector3dProto::Clear();
    }
    if (has_index()) {
      if (index_ != NULL) index_->::tsdf2::VolumeProto_GridIndex::Clear();
    }
    has_data_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ntsdf_voxels_.Clear();
  color_voxels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VolumeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tsdf2.VolumeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 voxels_per_side = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voxels_per_side_)));
          set_has_voxels_per_side();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_voxel_size;
        break;
      }

      // optional double voxel_size = 2;
      case 2: {
        if (tag == 17) {
         parse_voxel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voxel_size_)));
          set_has_voxel_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_ntsdf_voxel_weight;
        break;
      }

      // optional uint32 max_ntsdf_voxel_weight = 3;
      case 3: {
        if (tag == 24) {
         parse_max_ntsdf_voxel_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_ntsdf_voxel_weight_)));
          set_has_max_ntsdf_voxel_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_origin;
        break;
      }

      // optional .tsdf2.VolumeProto.Vector3dProto origin = 4 [deprecated = true];
      case 4: {
        if (tag == 34) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_has_data;
        break;
      }

      // optional bool has_data = 5;
      case 5: {
        if (tag == 40) {
         parse_has_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_data_)));
          set_has_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ntsdf_voxels;
        break;
      }

      // repeated uint32 ntsdf_voxels = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_ntsdf_voxels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ntsdf_voxels())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50, input, this->mutable_ntsdf_voxels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_color_voxels;
        break;
      }

      // repeated uint32 color_voxels = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_color_voxels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_color_voxels())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58, input, this->mutable_color_voxels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_index;
        break;
      }

      // optional .tsdf2.VolumeProto.GridIndex index = 8;
      case 8: {
        if (tag == 66) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tsdf2.VolumeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tsdf2.VolumeProto)
  return false;
#undef DO_
}

void VolumeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tsdf2.VolumeProto)
  // optional int32 voxels_per_side = 1;
  if (has_voxels_per_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->voxels_per_side(), output);
  }

  // optional double voxel_size = 2;
  if (has_voxel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->voxel_size(), output);
  }

  // optional uint32 max_ntsdf_voxel_weight = 3;
  if (has_max_ntsdf_voxel_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_ntsdf_voxel_weight(), output);
  }

  // optional .tsdf2.VolumeProto.Vector3dProto origin = 4 [deprecated = true];
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->origin(), output);
  }

  // optional bool has_data = 5;
  if (has_has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_data(), output);
  }

  // repeated uint32 ntsdf_voxels = 6 [packed = true];
  if (this->ntsdf_voxels_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ntsdf_voxels_cached_byte_size_);
  }
  for (int i = 0; i < this->ntsdf_voxels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ntsdf_voxels(i), output);
  }

  // repeated uint32 color_voxels = 7 [packed = true];
  if (this->color_voxels_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_color_voxels_cached_byte_size_);
  }
  for (int i = 0; i < this->color_voxels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->color_voxels(i), output);
  }

  // optional .tsdf2.VolumeProto.GridIndex index = 8;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tsdf2.VolumeProto)
}

::google::protobuf::uint8* VolumeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tsdf2.VolumeProto)
  // optional int32 voxels_per_side = 1;
  if (has_voxels_per_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->voxels_per_side(), target);
  }

  // optional double voxel_size = 2;
  if (has_voxel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->voxel_size(), target);
  }

  // optional uint32 max_ntsdf_voxel_weight = 3;
  if (has_max_ntsdf_voxel_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_ntsdf_voxel_weight(), target);
  }

  // optional .tsdf2.VolumeProto.Vector3dProto origin = 4 [deprecated = true];
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->origin(), target);
  }

  // optional bool has_data = 5;
  if (has_has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_data(), target);
  }

  // repeated uint32 ntsdf_voxels = 6 [packed = true];
  if (this->ntsdf_voxels_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ntsdf_voxels_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ntsdf_voxels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->ntsdf_voxels(i), target);
  }

  // repeated uint32 color_voxels = 7 [packed = true];
  if (this->color_voxels_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _color_voxels_cached_byte_size_, target);
  }
  for (int i = 0; i < this->color_voxels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->color_voxels(i), target);
  }

  // optional .tsdf2.VolumeProto.GridIndex index = 8;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tsdf2.VolumeProto)
  return target;
}

int VolumeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 voxels_per_side = 1;
    if (has_voxels_per_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voxels_per_side());
    }

    // optional double voxel_size = 2;
    if (has_voxel_size()) {
      total_size += 1 + 8;
    }

    // optional uint32 max_ntsdf_voxel_weight = 3;
    if (has_max_ntsdf_voxel_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_ntsdf_voxel_weight());
    }

    // optional .tsdf2.VolumeProto.Vector3dProto origin = 4 [deprecated = true];
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // optional .tsdf2.VolumeProto.GridIndex index = 8;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->index());
    }

    // optional bool has_data = 5;
    if (has_has_data()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 ntsdf_voxels = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->ntsdf_voxels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ntsdf_voxels(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ntsdf_voxels_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 color_voxels = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->color_voxels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->color_voxels(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _color_voxels_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VolumeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VolumeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VolumeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VolumeProto::MergeFrom(const VolumeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  ntsdf_voxels_.MergeFrom(from.ntsdf_voxels_);
  color_voxels_.MergeFrom(from.color_voxels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voxels_per_side()) {
      set_voxels_per_side(from.voxels_per_side());
    }
    if (from.has_voxel_size()) {
      set_voxel_size(from.voxel_size());
    }
    if (from.has_max_ntsdf_voxel_weight()) {
      set_max_ntsdf_voxel_weight(from.max_ntsdf_voxel_weight());
    }
    if (from.has_origin()) {
      mutable_origin()->::tsdf2::VolumeProto_Vector3dProto::MergeFrom(from.origin());
    }
    if (from.has_index()) {
      mutable_index()->::tsdf2::VolumeProto_GridIndex::MergeFrom(from.index());
    }
    if (from.has_has_data()) {
      set_has_data(from.has_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VolumeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeProto::CopyFrom(const VolumeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeProto::IsInitialized() const {

  if (has_origin()) {
    if (!this->origin().IsInitialized()) return false;
  }
  if (has_index()) {
    if (!this->index().IsInitialized()) return false;
  }
  return true;
}

void VolumeProto::Swap(VolumeProto* other) {
  if (other != this) {
    std::swap(voxels_per_side_, other->voxels_per_side_);
    std::swap(voxel_size_, other->voxel_size_);
    std::swap(max_ntsdf_voxel_weight_, other->max_ntsdf_voxel_weight_);
    std::swap(origin_, other->origin_);
    std::swap(index_, other->index_);
    std::swap(has_data_, other->has_data_);
    ntsdf_voxels_.Swap(&other->ntsdf_voxels_);
    color_voxels_.Swap(&other->color_voxels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VolumeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VolumeProto_descriptor_;
  metadata.reflection = VolumeProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tsdf2

// @@protoc_insertion_point(global_scope)
